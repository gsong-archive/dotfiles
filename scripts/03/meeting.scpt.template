property utils : load script POSIX file "@directory/utils.scpt"

# Main functions
on startMeeting()
  unloadCrashPlan()
  setIchatMeeting()
  setSkypeDND()
  pauseTimeOut()
  pauseItunes()
  pauseRdio()
end startMeeting

on endMeeting()
  loadCrashPlan()
  setIchatWorking()
  setSkypeOnline()
  resumeTimeOut()
end endMeeting

# Load and unload CrashPlan
on unloadCrashPlan()
  try
    run script POSIX file "@directory/unload_crashplan.scpt"
  end try
end unloadCrashPlan

on loadCrashPlan()
  try
    run script POSIX file "@directory/crashplan.scpt"
  end try
end loadCrashPlan

# Change iChat status
on setIchatWorking()
  tell utils
    if appIsRunning("iChat") then
      tell application "iChat"
        set status to available
        set status message to "Working"
      end tell
    end if
  end tell
end setIchatWorking

on setIchatMeeting()
  tell utils
    if appIsRunning("iChat") then
      tell application "iChat"
        set status to away
        set status message to "In a meeting"
      end tell
    end if
  end tell
end setIchatMeeting

# Change Skype status
on setSkypeDND()
  setSkypeStatus("Do not disturb")
end setSkypeDND

on setSkypeOnline()
  setSkypeStatus("Online")
end setSkypeOnline

on setSkypeStatus(status)
  tell utils
    if appIsRunning("Skype") then
      set currentApp to GetCurrentApp()
      activate application "Skype"
      try
        tell application "System Events"
          click menu item ¬
            status in menu "Change status" in menu item ¬
            "Change Status" in menu "File" of menu bar item ¬
            "File" in menu bar 1 of process "Skype"
        end tell
      end try
      activate application currentApp
    end if
  end tell
end setSkypeStatus

# Pause and resume Time Out
on pauseTimeOut()
  setTimeOutState("p", command down)
end pauseTimeOut

on resumeTimeOut()
  setTimeOutState("p", {command down, shift down})
end resumeTimeOut

on beginMicroBreak()
  setTimeOutState("b", command down)
end beginMicroBreak

on beginNormalBreak()
  setTimeOutState("n", command down)
end beginNormalBreak

on setTimeOutState(ks, ksMod)
  set TOF to "Time Out Free"
  tell utils
    if appIsRunning(TOF) then
      set currentApp to GetCurrentApp()
      activate application TOF
      try
        tell application "System Events" to keystroke ks using ksMod
      end try
      activate application currentApp
    end if
  end tell
end setTimeOutState

# Pause iTunes
on pauseItunes()
  tell utils
    if appIsRunning("iTunes") then
      tell application "iTunes" to pause
    end if
  end tell
end pauseItunes

# Pause Rdio
on pauseRdio()
  tell utils
    if appIsRunning("Rdio") then
      tell application "Rdio" to pause
    end if
  end tell
end pauseRdio
